#!/usr/bin/env python3
"""
Step 1: OPC UA 패킷 분석기
GetEndpoints 요청/응답을 캡처하고 분석합니다.
"""
import sys
sys.path.insert(0, '/root/opcua-research/python-opcua-env/lib/python3.10/site-packages')

from opcua import Client
from opcua.ua import SecurityPolicyType
import struct

def analyze_endpoints(url):
    """서버의 엔드포인트 정보를 분석"""
    print("╔═══════════════════════════════════════════════════════════════╗")
    print("║        Step 1: OPC UA 엔드포인트 분석                         ║")
    print("╚═══════════════════════════════════════════════════════════════╝")
    print()
    print(f"🔍 대상 서버: {url}")
    print()
    
    try:
        client = Client(url)
        
        # GetEndpoints 요청
        print("📡 GetEndpoints 요청 전송...")
        endpoints = client.connect_and_get_server_endpoints()
        
        print(f"✅ 엔드포인트 수신: {len(endpoints)}개")
        print()
        
        print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        print("📋 엔드포인트 상세 정보:")
        print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        
        for i, ep in enumerate(endpoints, 1):
            print(f"\n[엔드포인트 {i}]")
            print(f"  URL: {ep.EndpointUrl}")
            print(f"  보안 모드: {ep.SecurityMode}")
            print(f"  보안 정책: {ep.SecurityPolicyUri}")
            print(f"  보안 레벨: {ep.SecurityLevel}")
            
            # 보안 정책 분석
            if "None" in ep.SecurityPolicyUri:
                print(f"  ⚠️  NoSecurity - 평문 통신 가능!")
            elif "Basic128" in ep.SecurityPolicyUri:
                print(f"  🔒 Basic128 - 약한 암호화")
            elif "Basic256" in ep.SecurityPolicyUri:
                print(f"  🔐 Basic256 - 중간 암호화")
            elif "Aes128" in ep.SecurityPolicyUri or "Aes256" in ep.SecurityPolicyUri:
                print(f"  🔐🔐 AES - 강력한 암호화")
            
            # 인증 토큰
            if hasattr(ep, 'UserIdentityTokens'):
                print(f"  인증 방식:")
                for token in ep.UserIdentityTokens:
                    print(f"    - {token.TokenType}: {token.PolicyId}")
        
        print()
        print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        print("🎯 Downgrade 공격 가능성 분석:")
        print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        
        has_none = any("None" in ep.SecurityPolicyUri for ep in endpoints)
        has_secure = any("Basic256" in ep.SecurityPolicyUri or "Aes" in ep.SecurityPolicyUri for ep in endpoints)
        
        if has_none and has_secure:
            print("⚠️  위험: NoSecurity와 강력한 보안 정책이 공존!")
            print("   → Downgrade 공격 가능!")
            print()
            print("🎯 공격 시나리오:")
            print("   1. GetEndpoints 응답을 가로챔")
            print("   2. 강력한 보안 정책 제거")
            print("   3. NoSecurity만 남김")
            print("   4. 클라이언트가 NoSecurity 선택")
            print("   5. 평문 패스워드 전송 → 탈취!")
        elif has_none:
            print("⚠️  NoSecurity 정책 사용 중")
            print("   → 이미 평문 전송 중")
        else:
            print("✅ NoSecurity 정책 없음")
            print("   → Downgrade 공격 어려움")
        
        return endpoints
        
    except Exception as e:
        print(f"❌ 오류: {e}")
        return None

def main():
    print()
    print("=" * 70)
    print("OPC UA Password Downgrade 공격 - Step 1: 패킷 분석")
    print("=" * 70)
    print()
    
    # 3개 서버 모두 분석
    servers = [
        ("S2OPC (4840)", "opc.tcp://localhost:4840/S2OPC/server/"),
        ("Python opcua (4841)", "opc.tcp://localhost:4841/freeopcua/server/"),
        ("open62541 (4842)", "opc.tcp://localhost:4842/open62541/server/"),
    ]
    
    results = {}
    for name, url in servers:
        print(f"\n{'='*70}")
        print(f"분석 대상: {name}")
        print(f"{'='*70}")
        endpoints = analyze_endpoints(url)
        results[name] = endpoints
        print()
    
    print()
    print("╔═══════════════════════════════════════════════════════════════╗")
    print("║                Step 1 완료: 엔드포인트 분석 완료              ║")
    print("╚═══════════════════════════════════════════════════════════════╝")
    print()
    print("🎯 다음 단계: Step 2 - MITM 프록시 구현")
    print()

if __name__ == "__main__":
    main()
